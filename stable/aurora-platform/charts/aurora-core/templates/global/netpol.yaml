apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: "{{ .Values.global.cluster }}-global-netpol"
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: {{ .Values.global.project }}
  source:
    chart: {{ .Values.global.raw.helm.chart }}
    repoURL: {{ default .Values.global.helm.repository .Values.global.raw.helm.repository }}
    targetRevision: {{ .Values.global.raw.helm.targetRevision }}
    helm:
      releaseName: global-netpol
      values: |
        resources:
          - apiVersion: cilium.io/v2
            kind: CiliumClusterwideNetworkPolicy
            metadata:
              name: allow-egress-to-apiserver-from-platform
            spec:
              endpointSelector:
                matchExpressions:
                  - {key: io.cilium.k8s.namespace.labels.namespace.ssc-spc.gc.ca/purpose, operator: In, values: [platform, system]}
              egress:
                - toEntities:
                  - kube-apiserver
          - apiVersion: cilium.io/v2
            kind: CiliumClusterwideNetworkPolicy
            metadata:
              name: allow-egress-to-coredns-from-ns
            spec:
              endpointSelector:
                matchExpressions:
                  - key: io.kubernetes.pod.namespace
                    operator: NotIn
                    values:
                      - kube-system
              egress:
                - toEndpoints:
                    - matchLabels:
                        k8s-app: kube-dns
                  toPorts:
                    - ports:
                        - port: "53"
                      rules:
                        dns:
                          - matchPattern: "*"
          - apiVersion: cilium.io/v2
            kind: CiliumClusterwideNetworkPolicy
            metadata:
              name: allow-egress-to-host-network-pods-from-prometheus
            spec:
              description: |
                This rule allows metrics scraping for pods running with Host-Networking (ie: CIDR-Allocator)
              egress:
              - toEntities:
                - remote-node
                - host
              endpointSelector:
                matchExpressions:
                - key: io.kubernetes.pod.namespace
                  operator: In
                  values:
                  - prometheus-system
          - apiVersion: "cilium.io/v2"
            kind: CiliumClusterwideNetworkPolicy
            metadata:
              name: "allow-from-remote-worker-nodes"
            spec:
              endpointSelector:
                matchExpressions:
                  - key: io.kubernetes.pod.namespace
                    operator: NotIn
                    values:
                      - kube-system
              ingress:
                - fromEntities:
                  - remote-node
  destination:
    name: {{ .Values.global.cluster }}
    namespace: platform-system
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
